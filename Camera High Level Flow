From Application level to driver level.
1. getNUmverOfCameras();
2. getCameraInfo(int, CameraInfo);                                                                                ---> [1] mod = getCameraHalModule(); 
                                                                                                                       [2] mod ->get_camera_info(id, &priv_info); --->qcamera::QCamera2Factory::get_camera_info(id, info); ---> QCamera2Factory::getCameraInfo(id, info); ---> QCameraHardwareInterface::getCapabilities(id, info); ---> get_cam_info(id) in mm_camera_interface.c  
                                                                                                                                                                                                                                                                                                                                         typedef struct camera_info {
                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                         int facing;
                                                                                                                                                                                                                                                                                                                                         int orientation;
                                                                                                                                                                                                                                                                                                                                         uint32_t device_version;
                                                                                                                                                                                                                                                                                                                                         const camera_metadata_t *static_camera_characteristics;
                                                                                                                                                                                                                                                                                                                                         }camera_info_t;
                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                         typedef struct camera_metadata camera_metadata_t;
3. ICameraDevice::createInstance(int index, ICameraDevice);
   （1）new QCamera2;
   (2)QCamera2::init(int index); ---> <1> mod = getCameraHalModule();                                             ---> [1] handle = dlopen("libqcamera2.so", RTLD_NOW);
                                                                                                                       [2] mod = dlsym(handle, HAL_MODULE_INFO_SYM_AS_STR);
                                                                                                                       [3] return mod;
                                                                                                                       
                                                                                                                       camera_module_t HAL_MODULE_INFO_SYM = {
                                                                                                                     
                                                                                                                            commom: camera_common,
                                                                                                                            get_number_of_cameras:qcamera::QCamera2Factory::get_number_of_cameras,
                                                                                                                            get_camera_info: qcamera::QCamera2Factory::get_camera_info,
                                                                                                                            set_callbacks:NULL,
                                                                                                                            get_vendor_tag_ops:NULL,
                                                                                                                            reserved:{0}
                                                                                                                       }; 
                                                                                                                       
                                                                                                                       hw_module_t camera_common = {
                                                                                                                            
                                                                                                                            tag:HARDWARE_MODULE_TAG,
                                                                                                                            module_api_version:CAMERA_MODULE_API_VERSION_1_0,
                                                                                                                            hal_api_version: HARDWARE_HAL_API_VERSION,
                                                                                                                            id: CAMERA_HARDWARE_MODULE_ID,
                                                                                                                            name:"QCamera Module",
                                                                                                                            author: "Qualcomm Innovation Center Inc",
                                                                                                                            methods:&qcamera::QCamera2Factory::mModuleMethods,
                                                                                                                            dso:NULL,
                                                                                                                            reserved: {0},
                                                                                                                       };
                                                                                                                       
                                                                                                                       
                                                                                                                       
                                                                                                                       
                                                                                                                       
                                                                                                                       
                                                                                                                       
   
                                      <2> mod->common.methods->open(hw_module_t*, idStr, (hw_device_t**)&dev_); --->   hw_module_methods_t QCamera2Factory::mModuleMethods= {          
                                                                                                                       
                                                                                                                            open: QCamera2Factory::camera_device_open,            ---> gQCamera2Factory.cameraDeviceOpen(id, hw_device); ---> {1} hw = new QCamera2HardwareInterface(camera_id);
                                                                                                                                                                                                                                              {2} hw->openCamera(hw_device);                     ---> '1' QCamera2HardwareInterface::openCamera();  --->  "1" camera_open(index) defined in the mm_camera_interface.c   ---> (1) cam_obj = malloc(sizeof(mm_camera_obj_t));
                                                                                                                                                                                                                                                                                                                                                                                                                                 cam_obj->my_hdl = mm_camera_util_generate_handler(index);
                                                                                                                                                                                                                                                                                                                                                                                                                                 cam_obj->vtbl.camera_handle = cam_obj->my_hdl;
                                                                                                                                                                                                                                                                                                                                                                                                                                 cam_obj->vtbl.ops = &mm_camera_ops;
                                                                                                                                                                                                                                                                                                                                                                                                                             (2) mm_camera_open(cam_obj); (in mm_camera.c)                  ---> (1) open(dev_name, O_RDWR | O_NONBLOCK);  this is used for V4L2 driver interface.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (2) mm_camera_socket_create(cam_idx, MM_CAMERA_SOCK_TYPE_UDP); //create socket for video stream
                                                                                                                                                                                                                                                                                                                                                                                                                       
                                                                                                                       };
                                      <3> dev_->ops-set_callbacks(dev_, QCamera2::notify_callback,
                                                                  QCamera2::data_callback,
                                                                  QCamera2::data_timestamp_callback,
                                                                  CameraMemory::requestMemory, this);
                                      <4> dev_->ops-enable_msg_type(dev_, CAMERA_MSG_ERROR);
   (3)
   
4. CameraParams::init(mCamera)        ---> 1. ICameraDevice::getParameters(0,0, &paramBufSize);
                                           2. paramBuf = calloc(paramBufSize+1, 1);
                                           3. ICameraDevice::getParameter(paramBuf, paramBufSize);
5. CameraParams::setInt();
6. CameraParams::setPreviewSize();    --->
7. CameraParams::setVideoSize();
8. CameraParams::setPictureSize();
9. CameraParams::setPreviewFpsRange();
10.CameraParams::setVideoFPS();
11.CameraParams::set(); //other parameters
12.CameraParams::commit();           ---> QCamera2::setParameters(const ICameraParameters & params)      --->dev_->ops->set_parameters(dev_, buffer.str().c_str());      --->QCamera2HardwareInterface::set_parameters(device, parms);          ---> QCamera2HardwareInterface::processAPI(QCAMERA_SM_EVT_SET_PARAMS, parms);     ---> QCameraStateMachine::procAPI(QCAMERA_SM_EVT_SET_PARAMS, parms);    ---> QCameraStateMachine::smEvtProcRoutine(void *data);    ---> 1. cam_sem_wait(cmd_sem);                                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          2. QCameraStateMachine::stateMachine(evt, payload);      ---> QCameraStateMachine::procEvtPreviewStoppedState(evt, payload);     ---> 1. QCamera2HardwareInterface:: updateParameters(payload, needRestart);
amera2HardwareInterface:: commitParameterChanges();                  --->QCameraParameters::commitParameters();     --->QCameraParameters::commitSetBatch();    ---> m_pCamOpsTbl->ops->set_parms(camera_handle, parms);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          In QCamera2HardwardInterface::openCamera(), get m_pCamOpsTbl pointer, and the ops defined in the mm_camera.c    --->mm_camera_intf_set_parms(handle, parms)  --->(mm_camera.c) mm_caera_set_parms(my_obj, parms)      --->  mm_camera_util_s_ctrl(fd, id, *value); 
amera2HardwareInterface::signalAPIResult(result);


                                                                                                             typedef struct camera_device {
                                                                                                                hw_device_t common;
                                                                                                                camera_device_ops_t *ops;
                                                                                                                void *priv;
                                                                                                             }camera_device_t; which defined in camera.h
                                                                                                             
                                                                                                             
                                                                                                             
                                                                                                             static mm_camera_ops_t mm_camera_ops = {
                                                                                                             .query_capability = mm_camera_intf_query_capability,
                                                                                                             .register_event_notify = mm_camera_intf_register_event_notify,
                                                                                                             .close_camera = mm_camera_intf_close,
                                                                                                             .set_parms = mm_camera_intf_set_parms,
                                                                                                             .get_parms = mm_camera_intf_get_parms,
                                                                                                             .do_auto_focus = mm_camera_intf_do_auto_focus,
                                                                                                             .cancel_auto_focus = mm_camera_intf_cancel_auto_focus,
                                                                                                             .prepare_snapshot = mm_camera_intf_prepare_snapshot,
                                                                                                             .map_buf = mm_camera_intf_map_buf,
                                                                                                             .unmap_buf = mm_camera_intf_unmap_buf,
                                                                                                             .add_channel = mm_camera_intf_add_channel,
                                                                                                             .delete_channel = mm_camera_intf_del_channel,
                                                                                                             .get_bundle_info = mm_camera_intf_get_bundle_info,
                                                                                                             .add_stream = mm_camera_intf_add_stream,
                                                                                                             .link_stream = mm_camera_intf_link_stream,
                                                                                                             .delete_stream = mm_camera_intf_del_stream,
                                                                                                             .config_stream = mm_camera_intf_config_stream,
                                                                                                             .qbuf = mm_camera_intf_qbug,
                                                                                                             .map_stream_buf = mm_camera_intf_map_stream_buf,
                                                                                                             .unmap_stream_buf = mm_camera_intf_umap_stream_buf,
                                                                                                             .set_stream_parms = mm_camera_intf_set_stream_parms,
                                                                                                             .get_stream_parms = mm_camera_intf_get_stream_parms,
                                                                                                             .start_channel = mm_camera_intf_start_channel,
                                                                                                             .stop_channel = mm_camera_intf_stop_channel,
                                                                                                             .request_super_buf = mm_camera_intf_request_super_buf,
                                                                                                             .cancel_super_buf_request = mm_camera_intf_cancel_super_buf_request,
                                                                                                             .flush_super_buf_request = mm_camera_intf_flush_super_buf_request,
                                                                                                             .configure_notify_mode = mm_camera_intf_configure_notify_mode,
                                                                                                             .process_advanced_capture = mm_camera_intf_process_advanced_caputure,
                                                                                                             }
13.
